{"version":3,"file":"static/js/1.7a811bcc.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","redux/selectors.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","pages/Phonebook.jsx","../node_modules/@mui/icons-material/Delete.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"contactForm\":\"ContactForm_contactForm__y0Rca\",\"submit\":\"ContactForm_submit__eYq7N\",\"inputName\":\"ContactForm_inputName__a8jFO\",\"inputContact\":\"ContactForm_inputContact__ylxPW\",\"formContainer\":\"ContactForm_formContainer__TWEE2\"};","export const getContacts = state => state.contacts;\nexport const getFilter = state => state.filter;","import { useState } from 'react';\nimport css from './ContactForm.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/servises/operations';\nimport { getContacts } from 'redux/selectors';\nimport { TextField, Button } from '@mui/material';\n\nexport const ContactForm = () => {\n  const [newName, setNewName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const dispatch = useDispatch();\n  const prevContacts = useSelector(getContacts);\n\n  const createContact = (newName, number) => {\n    const checkNewContact = prevContacts.items.find(\n      ({ name }) => name === newName\n    );\n    if (checkNewContact) {\n      return alert(`${newName} is already in contacts`);\n    }\n    dispatch(addContact({ name: newName, number: number }));\n  };\n\n  const handleChange = ({ target }) => {\n    switch (target.name) {\n      case 'name':\n        setNewName(target.value);\n        break;\n\n      case 'number':\n        setNumber(target.value);\n        break;\n      default:\n        console.log('hi');\n    }\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    createContact(newName, number);\n\n    setNewName('');\n    setNumber('');\n  };\n  return (\n    <form className={css.contactForm} onSubmit={handleSubmit}>\n      <h2>Phonebook</h2>\n      <div className={css.formContainer}>\n        {/* <label htmlFor=\"InputName\" className={css.inputName}>\n          Name\n        </label>\n        <input\n          type=\"text\"\n          name=\"name\"\n          id=\"InputName\"\n          className={css.inputContact}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\" */}\n        {/* // required\n          // onChange={handleChange}\n          // value={newName}\n        /> */}\n        <TextField\n          type=\"text\"\n          name=\"name\"\n          id=\"outlined-basic\"\n          label=\"Name\"\n          variant=\"outlined\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          onChange={handleChange}\n          value={newName}\n          margin=\"normal\"\n          placeholder=\"Fill the name\"\n        />\n        {/* <label htmlFor=\"InputNumber\" className={css.inputName}>\n          Number\n        </label> */}\n        <TextField\n          type=\"number\"\n          name=\"number\"\n          id=\"outlined-basic\"\n          label=\"Number\"\n          variant=\"outlined\"\n          inputProps={{ inputMode: 'numeric', pattern: '[0-9]*' }}\n          // pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          // title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          onChange={handleChange}\n          value={number}\n          margin=\"normal\"\n          placeholder=\"Fill the number\"\n        />\n        {/* <input\n          type=\"tel\"\n          name=\"number\"\n          id=\"InputNumber\"\n          className={css.inputContact}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          onChange={handleChange}\n          value={number} */}\n        {/* /> */}\n        <Button variant=\"contained\" type=\"submit\" margin=\"normal\">\n          Add contact\n        </Button>\n        {/* <button type=\"submit\" className={css.submit}>\n          Add contact\n        </button> */}\n      </div>\n    </form>\n  );\n};\n","import { removeContact } from 'redux/servises/operations';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getContacts, getFilter } from 'redux/selectors';\nimport { IconButton } from '@mui/material';\nimport DeleteIcon from '@mui/icons-material/Delete';\n\nexport const ContactList = () => {\n  const { items, error } = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const filteredContacts = items.filter(contact =>\n    contact.name.toLowerCase().includes(filter)\n  );\n\n  return (\n    <div style={{ display: 'flex', justifyContent: 'center', margin: 5 }}>\n      {error && <p>{error}</p>}\n      {filteredContacts.length > 0 && (\n        <ul>\n          {filteredContacts.map(item => (\n            <li key={item.id}>\n              {item.name}: {item.number}\n              {/* <button\n                type=\"button\"\n                onClick={() => dispatch(removeContact(item.id))}\n                style={{\n                  marginLeft: 5,\n                }}\n              > */}\n              {/* Delete\n              </button> */}\n              <IconButton\n                aria-label=\"delete\"\n                type=\"button\"\n                color=\"primary\"\n                onClick={() => dispatch(removeContact(item.id))}\n              >\n                <DeleteIcon />\n              </IconButton>\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { TextField } from '@mui/material';\nimport { getFilter } from 'redux/selectors';\nimport { setFilter } from 'redux/filter/slice';\n\nexport const Filter = () => {\n    const dispatch = useDispatch();\n    const filter = useSelector(getFilter);\n    \n    return (\n      <form style={{ display: 'flex', justifyContent: 'center', }}>\n        <div style={{ display: 'inline-grid' }}>\n          <h2>Contacts</h2>\n          <TextField\n            type=\"text\"\n            name=\"filter\"\n            id=\"outlined-basic\"\n            label=\"Find contacts by name\"\n            variant=\"outlined\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            onChange={e => {\n              const action = setFilter(e.target.value.toLowerCase());\n              dispatch(action);\n            }}\n            value={filter}\n            margin=\"normal\"\n            placeholder=\"Fill the name\"\n          />\n          {/* <label\n            htmlFor=\"InputFilter\"\n            style={{\n                display: 'inline-grid',\n            }}\n        >\n            Find contacts by name\n            <input\n                type=\"text\"\n                name=\"filter\"\n                id=\"InputFilter\"\n                value={filter}\n                onChange={e => {\n                    const action = setFilter(e.target.value.toLowerCase());\n                    dispatch(action);\n                }}\n                style={{\n                    marginTop: 15,\n                    height: 30,\n                }}\n            />\n        </label> */}\n        </div>\n      </form>\n    );\n};\n","import { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchContacts } from 'redux/servises/operations';\nimport { getContacts } from 'redux/selectors';\n\nconst Phonebook = () => {\n  const dispatch = useDispatch();\n  const { isLoading, error } = useSelector(getContacts);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n\n      <ContactForm />\n\n      <Filter />\n      {isLoading && !error && <p>Loading...</p>}\n      <ContactList />\n    </div>\n  );\n};\nexport default Phonebook;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\"\n}), 'Delete');\nexports.default = _default;"],"names":["getContacts","state","contacts","getFilter","filter","ContactForm","useState","newName","setNewName","number","setNumber","dispatch","useDispatch","prevContacts","useSelector","handleChange","target","name","value","console","log","className","css","onSubmit","e","preventDefault","items","find","alert","addContact","createContact","TextField","type","id","label","variant","pattern","title","required","onChange","margin","placeholder","inputProps","inputMode","Button","ContactList","error","filteredContacts","contact","toLowerCase","includes","style","display","justifyContent","length","map","item","IconButton","color","onClick","removeContact","Delete","Filter","action","setFilter","isLoading","useEffect","fetchContacts","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}